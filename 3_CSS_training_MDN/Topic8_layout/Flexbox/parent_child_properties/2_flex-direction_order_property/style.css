.box{
    color: white;
    font-size: 100px;
    text-align: center;
    text-shadow: 4px 4px 0 rgba(0, 0, 0, 0, 1);
}

.box1{ background: #1abc9c; }
.box2{ background: #3498db; }
.box3{ background: #9b59b6; }
.box4{ background: #34495e; }
.box5{ background: #f1c40f; }
.box6{ background: #e67e22; }
.box7{ background: #e74c3c; }
.box8{ background: #bdc3c7; }
.box9{ background: #2ecc71; }
.box10{ background: #16ae85; }


/* Here is a code for flex box */
/* Flex box order, re-ordering columns and rows */

.wrapper{
	display: flex;
	flex-direction: row; 
	/* flex-direction: row; for which main-axis goes left to right*/
	/* flex-direction: column; for which main-axis goes top to bottom */
	/* flex-direction: column-reverse; for which main-axis goes bottom to top*/
	/* flex-direction: row-reverse; for which main-axis goes right to left*/
	/*
		This could have been done by floating elements, why flex-direction?
		It is going to be easy to spill over the content in two columns
		or two rows with little changes using flexbox. Unlike using float,
		one has to create another div to obtain the same, which is more code.

		When do we use flex-direction?
		We use amidst using justify-content and align-items.
	*/
}

.box{
	flex: 1;
}

.box3{
	flex: 2;
	order: 1; /* any element is order 0 by default*/
}

.box6{
	flex: 4;
	order: 2;
}

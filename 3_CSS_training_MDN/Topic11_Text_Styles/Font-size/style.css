

/*
	The font-size CSS property specifies the size of the font. 
	Setting the font size may, in turn, change the size of 
	other items, since it is used to compute the value of 
	the em and ex <length> units.
*/

.forExample{
	/* <absolute-size> values */
	font-size: xx-small;
	font-size: x-small;
	font-size: small;
	font-size: medium;
	font-size: large;
	font-size: x-large;
	font-size: xx-large;

	/* <relative-size> values */
	font-size: larger;
	font-size: smaller;

	/* <length> values */
	font-size: 12px;
	font-size: 0.8em;

	/* <percentage> values */
	font-size: 80%;

	/* Global values */
	font-size: inherit;
	font-size: initial;
	font-size: unset;
}

/*
	Values

		xx-small, x-small, small, medium, large, x-large, xx-large
		A set of absolute size keywords based on the user's default font size 
		(which is medium). Similar to presentational HTML's <font size="1"> 
		through <font size="7"> where the user's default font size is <font size="3">.
		
		larger, smaller
		Larger or smaller than the parent element's font size, by roughly 
		the ratio used to separate the absolute size keywords above.
		
		<length>
		A positive <length>. When the units are specified in em or ex, the 
		size is defined relative to the size of the font on the parent 
		element of the element in question. For example, 0.5em is half 
		the font size of the parent of the current element. When the 
		units are specified in rem, the size is defined relative to 
		the size of the font used by the html (root) element.

		<percentage>
		A positive <percentage> of the parent element's font size.

	Formal syntax
		<absolute-size> | <relative-size> | <length> | <percentage>
		where 
		<absolute-size> = xx-small | s-small | small | medium | large | x-large | xx-large
		<relative-size> = larger | smaller
*/

/*
	It is best to use values that are relative to the user's default 
	font size, and avoid absolute values such as lengths with units 
	other than em or ex. However, if such absolute values must be 
	used, px are preferred over other units because their meaning 
	does not vary depending on what the operating system thinks
	(generally incorrectly) the resolution of the monitor is.
*/

/*
	Possible approaches
	There are several ways to specify the font size, with keywords 
	or numerical values for pixels or ems. Choose the appropriate 
	method based on the needs for the particular web page.
	

	Keywords

	Keywords are a good way to set the size of fonts on the web. By 
	setting a keyword font size on the body element, you can set 
	relative font-sizing everywhere else on the page, giving you 
	the ability to easily scale the font up or down on the entire
	page accordingly.

	Pixels

	Setting the font size in pixel values (px) is a good choice 
	when you need pixel accuracy. A px value is static. This is 
	an OS-independent and cross-browser way of literally telling 
	the browsers to render the letters at exactly the number of 
	pixels in height that you specified. The results may vary 
	across browsers, as they may use different algorithms to 
	achieve a similar effect.

	Font sizing settings can also be used in combination. 
	For example, if a parent element is set to 16px and its 
	child element is set to larger, the child element displays 
	larger than the parent element in the page.

	Ems

	Another way of setting the font size is with em values. 
	The size of an em value is dynamic. When defining the 
	font-size property, an em is equal to the size of the font 
	that applies to the parent of the element in question. If 
	you haven't set the font size anywhere on the page, then 
	it is the browser default, which is probably 16px. So, by 
	default 1em = 16px, and 2em = 32px. If you set a font-size
	of 20px on the body element, then 1em = 20px and 2em = 40px. 
	Note that the value 2 is essentially a multiplier of the current em size.
	
	In order to calculate the em equivalent for any pixel value required, you can use this formula:
	
	em = desired element pixel value / parent element font-size in pixels

	For example, suppose the font-size of the body of the page 
	is set to 1em, with the browser standard of 1em = 16px; if 
	the font-size you want is 12px, then you should specify 
	0.75em (because 12/16 = 0.75). Similarly, if you want a 
	font size of 10px, then specify 0.625em (10/16 = 0.625); 
	for 22px, specify 1.375em (22/16).
	
	A popular technique to use throughout the document is to 
	set the the font-size of the body to 62.5% (that is 62.5% 
	of the default of 16px), which equates to 10px, or 0.625em. 
	Now you can set the font-size for any elements using em units, 
	with an easy-to-remember conversion, by dividing the px value 
	by 10. This way 6px = 0.6em, 8px = 0.8em, 12px = 1.2em, 14px = 1.4em, 16px = 1.6em. For example:
	
	
*/
body {
  font-size: 62.5%; /* font-size 1em = 10px on default browser settings */
}
span {
  font-size: 1.6em; /* 1.6em = 16px */
}


/*
	The em is a very useful unit in CSS, since it automatically 
	adapts its length relative to the font that the reader chooses to use.

	One important fact to keep in mind:  em values compound. Take 
	the following HTML and apply it with the previous CSS above:

	<div>
	<span>Outer <span>inner</span> outer</span>
	</div>

	Assuming that the browser's default font-size is 16px, the words 
	"outer" would be rendered at 16px, but the word "inner" would be 
	rendered at 25.6px. This is because the inner span's font-size is 
	1.6 em which is relative to its parent's font-size, which is in 
	turn relative to its parent's font-size. This is often called compounding.

*/

/*
	Rems

		rem values were invented in order to sidestep the compounding problem.
		rem values are relative to the root html element, not the parent 
		element. In other words, it lets you specify a font size in a 
		relative fashion without being affected by the size of the parent, 
		thereby eliminating compounding.
	
	The CSS below is nearly identical to the previous example. The only 
	exception is that the unit has been changed to rem.
	
*/

html {
  font-size: 62.5%; /* font-size 1em = 10px on default browser settings */
}

span {
  font-size: 1.6rem;
}

/*
	Then we apply this CSS to the same HTML, which looks like this:

	<span>Outer <span>inner</span> outer</span>

	Output:
	Outer inner outer
*/

/*
	Example 1

		// Set paragraph text to be very large.
		p { font-size: xx-large }

		// Set h1 (level 1 heading) text to be 2.5 times the size
		// of the text around it. 
		h1 { font-size: 250% }

		// Sets text enclosed within span tag to be 16px 
		span { font-size: 16px; }
*/


/*
	Example2: 

	.small {
	font-size: xx-small;
	}
	.larger {
		font-size: larger;
	}
	.point {
		font-size: 24pt;
	}
	.percent {
		font-size: 200%;
	}

	<h1 class="small">Small H1</h1>
	<h1 class="larger">Larger H1</h1>
	<h1 class="point">24 point H1</h1>
	<h1 class="percent">200% H1</h1>
*/



/*
	Notes:
	em and ex units on the font-size property are relative to the 
	parent element's font size (unlike all other properties, where 
	they're relative to the font size on the element). This means
	em units and percentages do the same thing for font-size.
*/